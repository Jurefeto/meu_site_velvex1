import os
from flask import Flask, render_template, request, redirect, url_for, session, flash
from werkzeug.utils import secure_filename
from werkzeug.security import generate_password_hash, check_password_hash
from flask_sqlalchemy import SQLAlchemy
from datetime import timedelta, datetime
from functools import wraps

# Removidas importações para Flask-WTF e WTForms:
# from flask_wtf import FlaskForm
# from wtforms import StringField, PasswordField, SubmitField
# from wtforms.validators import DataRequired, Email, Length

app = Flask(__name__)
app.secret_key = 'sua_chave_secreta_velvex_super_super_segura_finalissima_ultra_revisada_agora_vai_mesmo_denovo' # MUDE PARA ALGO ÚNICO E SEGURO!
app.config['PERMANENT_SESSION_LIFETIME'] = timedelta(days=7)

# --- Configuração do Banco de Dados SQLite ---
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///' + os.path.join(BASE_DIR, 'velvex.db') 
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
db = SQLAlchemy(app)

# --- Configuração da pasta de uploads ---
UPLOAD_FOLDER = os.path.join(BASE_DIR, 'static', 'uploads', 'anuncios')
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER
if not os.path.exists(UPLOAD_FOLDER):
    os.makedirs(UPLOAD_FOLDER)

# --- Modelos do Banco de Dados ---
class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    nome = db.Column(db.String(100), nullable=False)
    cpf = db.Column(db.String(14), unique=True, nullable=False)
    email = db.Column(db.String(120), unique=True, nullable=False)
    endereco = db.Column(db.String(200), nullable=False)
    senha_hash = db.Column(db.String(256), nullable=False)
    is_admin = db.Column(db.Boolean, default=False, nullable=False)
    is_banned = db.Column(db.Boolean, default=False, nullable=False)
    anuncios = db.relationship('Anuncio', backref='autor', lazy='select') 
    ofertas_feitas = db.relationship('Oferta', foreign_keys='Oferta.comprador_id', backref='comprador', lazy='select')

    def __repr__(self):
        return f'<User {self.nome}>'

class Anuncio(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    titulo = db.Column(db.String(100), nullable=False)
    descricao = db.Column(db.Text, nullable=True)
    categoria = db.Column(db.String(50), nullable=False)
    preco = db.Column(db.Float, nullable=False)
    condicao = db.Column(db.String(50), nullable=False)
    imagens_nomes = db.Column(db.Text, nullable=True) 
    status = db.Column(db.String(20), default='pendente', nullable=False) 
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    ofertas = db.relationship('Oferta', backref='anuncio', lazy='dynamic', cascade="all, delete-orphan") 

    def __repr__(self):
        return f'<Anuncio {self.titulo}>'

class Oferta(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    anuncio_id = db.Column(db.Integer, db.ForeignKey('anuncio.id'), nullable=False)
    comprador_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    valor_oferta = db.Column(db.Float, nullable=False)
    status = db.Column(db.String(20), default='pendente', nullable=False) # 'pendente', 'aceita', 'rejeitada', 'cancelada'
    data_oferta = db.Column(db.DateTime, default=datetime.utcnow, nullable=False)

    def __repr__(self):
        return f'<Oferta {self.id} - Anuncio: {self.anuncio_id} - Valor: {self.valor_oferta}>'

# --- Decoradores ---
def login_required(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if 'user_id' not in session:
            flash('Por favor, faça login para acessar esta página.', 'warning')
            return redirect(url_for('login_page'))
        return f(*args, **kwargs)
    return decorated_function

def admin_required(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if not session.get('is_admin'): 
            flash('Acesso negado. Você precisa ser um administrador para acessar esta página.', 'danger')
            return redirect(url_for('home'))
        return f(*args, **kwargs)
    return decorated_function

# --- Definições para o formulário de filtros e criação/edição ---
CATEGORIAS_FORM = [
    {'value': 'sneakers', 'label': 'Tênis (Sneakers)'},
    {'value': 'vestuario_camisetas', 'label': 'Vestuário - Camisetas'},
    {'value': 'vestuario_moletons', 'label': 'Vestuário - Moletons'},
    {'value': 'vestuario_jaquetas', 'label': 'Vestuário - Jaquetas'},
    {'value': 'vestuario_calcas_shorts', 'label': 'Vestuário - Calças & Shorts'},
    {'value': 'acessorios_bones', 'label': 'Acessórios - Bonés & Gorros'},
    {'value': 'acessorios_bolsas', 'label': 'Acessórios - Bolsas & Mochilas'},
    {'value': 'acessorios_outros', 'label': 'Acessórios - Outros'},
]

CONDICOES_FORM = [
    {'value': 'novo_com_etiqueta', 'label': 'Novo, com etiqueta'},
    {'value': 'novo_sem_etiqueta', 'label': 'Novo, sem etiqueta'},
    {'value': 'usado_como_novo', 'label': 'Usado, como novo'},
    {'value': 'usado_bom_estado', 'label': 'Usado, bom estado'},
    {'value': 'usado_com_marcas', 'label': 'Usado, com marcas de uso'},
]

CATEGORIAS_PAI_PARA_FILTER_STARTSWITH = {
    'vestuario': 'Vestuário',
    'acessorios': 'Acessórios',
}


# --- Rotas ---
@app.route('/')
def home():
    return render_template('index.html')

@app.route('/loja')
@login_required 
def loja_page():
    return render_template('loja.html', categorias_form=CATEGORIAS_FORM, condicoes_form=CONDICOES_FORM)

@app.route('/anuncios')
def anuncios_page():
    categoria_filtro = request.args.get('categoria_filtro', '')
    preco_min_str = request.args.get('preco_min', '')
    preco_max_str = request.args.get('preco_max', '')
    condicao_filtro = request.args.get('condicao_filtro', '')
    ordenar_por = request.args.get('ordenar_por', 'recentes')

    query_anuncios = Anuncio.query.filter_by(status='aprovado')
    titulo_pagina = "Nossos Anúncios Aprovados"
    
    filtros_atuais = {
        'categoria_filtro': categoria_filtro,
        'preco_min': preco_min_str,
        'preco_max': preco_max_str,
        'condicao_filtro': condicao_filtro,
        'ordenar_por': ordenar_por
    }

    if categoria_filtro:
        if categoria_filtro in CATEGORIAS_PAI_PARA_FILTER_STARTSWITH:
            query_anuncios = query_anuncios.filter(Anuncio.categoria.startswith(categoria_filtro + '_'))
            titulo_pagina = f"Anúncios - {CATEGORIAS_PAI_PARA_FILTER_STARTSWITH[categoria_filtro]}"
        else:
            query_anuncios = query_anuncios.filter_by(categoria=categoria_filtro)
            nome_categoria_formatado = next((cat['label'] for cat in CATEGORIAS_FORM if cat['value'] == categoria_filtro), categoria_filtro.replace('_', ' ').capitalize())
            titulo_pagina = f"Anúncios - {nome_categoria_formatado}"
    
    if preco_min_str:
        try:
            preco_min = float(preco_min_str)
            if preco_min >= 0:
                query_anuncios = query_anuncios.filter(Anuncio.preco >= preco_min)
            else:
                flash("Preço mínimo inválido (negativo).", "warning")
                filtros_atuais['preco_min'] = '' 
        except ValueError:
            flash("Preço mínimo inválido. Por favor, insira um número.", "warning")
            filtros_atuais['preco_min'] = '' 

    if preco_max_str:
        try:
            preco_max = float(preco_max_str)
            if preco_max >= 0:
                query_anuncios = query_anuncios.filter(Anuncio.preco <= preco_max)
            else:
                flash("Preço máximo inválido (negativo).", "warning")
                filtros_atuais['preco_max'] = '' 
        except ValueError:
            flash("Preço máximo inválido. Por favor, insira um número.", "warning")
            filtros_atuais['preco_max'] = '' 

    if 'preco_min' in filtros_atuais and 'preco_max' in filtros_atuais and \
       filtros_atuais['preco_min'] and filtros_atuais['preco_max']: 
        try:
            p_min = float(filtros_atuais['preco_min'])
            p_max = float(filtros_atuais['preco_max'])
            if p_min > p_max:
                flash("O preço mínimo não pode ser maior que o preço máximo. Por favor, ajuste os valores.", "warning")
        except ValueError:
            pass 

    if condicao_filtro:
        query_anuncios = query_anuncios.filter_by(condicao=condicao_filtro)
    
    if ordenar_por == 'preco_asc':
        query_anuncios = query_anuncios.order_by(Anuncio.preco.asc())
    elif ordenar_por == 'preco_desc':
        query_anuncios = query_anuncios.order_by(Anuncio.preco.desc())
    else: # 'recentes' (padrão ou qualquer outro valor inválido)
        query_anuncios = query_anuncios.order_by(Anuncio.id.desc())
    
    anuncios_filtrados = query_anuncios.all()
    
    return render_template('anuncios.html', 
                           anuncios=anuncios_filtrados, 
                           titulo_da_pagina=titulo_pagina, 
                           filtros_atuais=filtros_atuais, 
                           categorias_form=CATEGORIAS_FORM, 
                           condicoes_form=CONDICOES_FORM) 

@app.route('/anuncio/<int:anuncio_id>/fazer-oferta', methods=['POST'])
@login_required
def fazer_oferta_action(anuncio_id):
    anuncio = Anuncio.query.get_or_404(anuncio_id)
    valor_oferta_str = request.form.get('valor_oferta', '').strip()

    if anuncio.user_id == session['user_id']:
        flash('Você não pode fazer uma oferta em seu próprio anúncio.', 'danger')
        return redirect(request.referrer or url_for('anuncios_page'))
    
    if not valor_oferta_str:
        flash('O valor da oferta é obrigatório.', 'danger')
        return redirect(request.referrer or url_for('anuncios_page'))
    
    try:
        valor_oferta = float(valor_oferta_str)
        if valor_oferta <= 0:
            flash('O valor da oferta deve ser maior que zero.', 'danger')
            return redirect(request.referrer or url_for('anuncios_page'))
        
        limite_inferior_oferta = anuncio.preco * 0.70 
        if valor_oferta < limite_inferior_oferta:
            flash(f'O valor da oferta não pode ser inferior a 30% do preço original (R$ {limite_inferior_oferta:.2f}).', 'warning')
            return redirect(request.referrer or url_for('anuncios_page'))

        if valor_oferta > anuncio.preco:
            flash('O valor da oferta não pode ser maior que o preço do anúncio.', 'warning')
    except ValueError:
        flash('Valor da oferta inválido. Por favor, insira um número.', 'danger')
        return redirect(request.referrer or url_for('anuncios_page'))
    
    oferta_existente = Oferta.query.filter_by(anuncio_id=anuncio.id, comprador_id=session['user_id'], status='pendente').first()
    if oferta_existente:
        flash('Você já tem uma oferta pendente para este anúncio. Aguarde a resposta do vendedor ou cancele a anterior.', 'warning')
        return redirect(request.referrer or url_for('anuncios_page'))

    nova_oferta = Oferta(anuncio_id=anuncio.id,
                         comprador_id=session['user_id'],
                         valor_oferta=valor_oferta,
                         status='pendente')
    db.session.add(nova_oferta)
    db.session.commit()
    flash(f'Sua oferta de R$ {valor_oferta:.2f} para "{anuncio.titulo}" foi enviada com sucesso!', 'success')
    return redirect(request.referrer or url_for('anuncios_page'))

@app.route('/anuncio/<int:anuncio_id>/comprar', methods=['POST'])
@login_required
def comprar_anuncio_action(anuncio_id):
    anuncio = Anuncio.query.get_or_404(anuncio_id)

    if anuncio.user_id == session['user_id']:
        flash('Você não pode comprar seu próprio anúncio.', 'danger')
        return redirect(request.referrer or url_for('anuncios_page'))

    flash(f'Você "comprou" "{anuncio.titulo}" por R$ {anuncio.preco:.2f}! (Funcionalidade de compra real ainda não implementada)', 'success')
    
    return redirect(url_for('minha_conta_page'))

@app.route('/oferta/<int:oferta_id>/aceitar', methods=['POST'])
@login_required
def aceitar_oferta_action(oferta_id):
    oferta = Oferta.query.get_or_404(oferta_id)

    if not (oferta.anuncio.user_id == session['user_id'] or session.get('is_admin')):
        flash('Você não tem permissão para gerenciar esta oferta.', 'danger')
        return redirect(url_for('minha_conta_page'))
    
    if oferta.status != 'pendente':
        flash('Esta oferta não está mais pendente e não pode ser aceita.', 'warning')
        return redirect(url_for('minha_conta_page'))

    comprador_nome = oferta.comprador.nome
    comprador_email = oferta.comprador.email
    anuncio_titulo = oferta.anuncio.titulo
    valor_oferta_display = oferta.valor_oferta

    oferta.anuncio.preco = oferta.valor_oferta
    
    db.session.delete(oferta)
    db.session.commit()

    flash(f'Oferta de R$ {valor_oferta_display:.2f} para "{anuncio_titulo}" aceita com sucesso! O preço do anúncio foi atualizado. Entre em contato com {comprador_nome} ({comprador_email}).', 'success')
    return redirect(url_for('minha_conta_page'))

@app.route('/oferta/<int:oferta_id>/rejeitar', methods=['POST'])
@login_required
def rejeitar_oferta_action(oferta_id):
    oferta = Oferta.query.get_or_404(oferta_id)

    if not (oferta.anuncio.user_id == session['user_id'] or session.get('is_admin')):
        flash('Você não tem permissão para gerenciar esta oferta.', 'danger')
        return redirect(url_for('minha_conta_page'))

    if oferta.status != 'pendente':
        flash('Esta oferta não está mais pendente e não pode ser rejeitada.', 'warning')
        return redirect(url_for('minha_conta_page'))

    db.session.delete(oferta)
    db.session.commit()
    flash(f'Oferta de R$ {oferta.valor_oferta:.2f} para "{oferta.anuncio.titulo}" rejeitada.', 'info')
    return redirect(url_for('minha_conta_page'))

@app.route('/oferta/<int:oferta_id>/cancelar', methods=['POST'])
@login_required
def cancelar_oferta_action(oferta_id):
    oferta = Oferta.query.get_or_404(oferta_id)

    if not (oferta.comprador_id == session['user_id']):
        flash('Você não tem permissão para cancelar esta oferta.', 'danger')
        return redirect(url_for('minha_conta_page'))
    
    if oferta.status != 'pendente':
        flash('Esta oferta não pode ser cancelada pois não está mais pendente.', 'warning')
        return redirect(url_for('minha_conta_page'))

    db.session.delete(oferta)
    db.session.commit()
    flash(f'Sua oferta de R$ {oferta.valor_oferta:.2f} para "{oferta.anuncio.titulo}" foi cancelada.', 'info')
    return redirect(url_for('minha_conta_page'))

@app.route('/loja/criar-anuncio', methods=['POST'])
@login_required 
def criar_anuncio_action():
    if request.method == 'POST':
        titulo = request.form.get('anuncio_titulo', '').strip()
        descricao = request.form.get('anuncio_descricao', '').strip()
        categoria = request.form.get('anuncio_categoria', '').strip()
        preco_str = request.form.get('anuncio_preco', '').strip()
        condicao = request.form.get('anuncio_condicao', '').strip()
        
        erros = False
        if not titulo: flash('O título do anúncio é obrigatório.', 'danger'); erros=True
        if not categoria: flash('A categoria do anúncio é obrigatória.', 'danger'); erros=True
        if not condicao: flash('A condição do produto é obrigatória.', 'danger'); erros=True
        
        preco = 0.0
        if not preco_str: flash('O preço do anúncio é obrigatório.', 'danger'); erros=True
        else:
            try: 
                preco = float(preco_str)
                if preco < 0: flash('O preço não pode ser negativo.', 'danger'); erros=True
            except ValueError: flash('O preço informado é inválido.', 'danger'); erros=True
        
        if erros: 
            return render_template('loja.html', categorias_form=CATEGORIAS_FORM, condicoes_form=CONDICOES_FORM) 

        nomes_imagens_salvas = []
        uploaded_files = request.files.getlist("anuncio_imagens")
        for imagem_arquivo in uploaded_files:
            if imagem_arquivo and imagem_arquivo.filename != '':
                nome_seguro = secure_filename(imagem_arquivo.filename)
                try:
                    caminho_para_salvar = os.path.join(app.config['UPLOAD_FOLDER'], nome_seguro)
                    imagem_arquivo.save(caminho_para_salvar)
                    nomes_imagens_salvas.append(nome_seguro)
                except Exception as e:
                    flash(f"Erro ao salvar imagem {nome_seguro}: {e}", "danger")
        
        imagens_nomes_str = ",".join(nomes_imagens_salvas) if nomes_imagens_salvas else None

        novo_anuncio = Anuncio(titulo=titulo, descricao=descricao, categoria=categoria, preco=preco,
                               condicao=condicao, imagens_nomes=imagens_nomes_str, 
                               status='pendente', user_id=session['user_id'])
        db.session.add(novo_anuncio)
        db.session.commit()
        flash(f'Anúncio "{novo_anuncio.titulo}" enviado para aprovação!', 'success')
        return redirect(url_for('minha_conta_page'))
    return render_template('loja.html', categorias_form=CATEGORIAS_FORM, condicoes_form=CONDICOES_FORM)


@app.route('/anuncio/<int:anuncio_id>/editar', methods=['GET', 'POST'])
@login_required
def editar_anuncio_action(anuncio_id):
    anuncio_para_editar = Anuncio.query.get_or_404(anuncio_id)
    if not (anuncio_para_editar.user_id == session['user_id'] or session.get('is_admin')):
        flash('Você não tem permissão para editar este anúncio.', 'danger')
        return redirect(url_for('anuncios_page'))

    if request.method == 'POST':
        anuncio_para_editar.titulo = request.form.get('anuncio_titulo', anuncio_para_editar.titulo).strip()
        anuncio_para_editar.descricao = request.form.get('anuncio_descricao', anuncio_para_editar.descricao).strip()
        anuncio_para_editar.categoria = request.form.get('anuncio_categoria', anuncio_para_editar.categoria).strip()
        preco_str = request.form.get('anuncio_preco', str(anuncio_para_editar.preco)).strip()
        anuncio_para_editar.condicao = request.form.get('anuncio_condicao', anuncio_para_editar.condicao).strip()
        
        erros_edicao = False
        if not anuncio_para_editar.titulo: flash('O título do anúncio é obrigatório.', 'danger'); erros_edicao=True
        try:
            preco_float = float(preco_str)
            if preco_float < 0:
                flash('O preço não pode ser negativo.', 'danger'); erros_edicao = True
            else:
                anuncio_para_editar.preco = preco_float
        except ValueError:
            flash('Preço inválido.', 'danger'); erros_edicao = True
        
        if erros_edicao:
            return render_template('editar_anuncio.html', anuncio=anuncio_para_editar,
                                   categorias_form=CATEGORIAS_FORM, condicoes_form=CONDICOES_FORM)
        
        novas_imagens_enviadas = request.files.getlist("anuncio_imagens")
        arquivos_para_processar = [f for f in novas_imagens_enviadas if f and f.filename != '']

        if arquivos_para_processar:
            nomes_antigos_str = anuncio_para_editar.imagens_nomes
            if nomes_antigos_str:
                for nome_antigo in nomes_antigos_str.split(','):
                    if nome_antigo:
                        try:
                            caminho_antigo = os.path.join(app.config['UPLOAD_FOLDER'], nome_antigo.strip())
                            if os.path.exists(caminho_antigo):
                                os.remove(caminho_antigo)
                        except OSError as e:
                            print(f"Erro ao deletar imagem antiga {nome_antigo}: {e}")
            
            nomes_novas_imagens = []
            for imagem_arquivo in arquivos_para_processar:
                nome_seguro = secure_filename(imagem_arquivo.filename)
                caminho_salvar = os.path.join(app.config['UPLOAD_FOLDER'], nome_seguro)
                try:
                    imagem_arquivo.save(caminho_salvar)
                    nomes_novas_imagens.append(nome_seguro)
                except Exception as e:
                    flash(f"Ocorreu um erro ao salvar a nova imagem {nome_seguro}: {e}", "danger")
            anuncio_para_editar.imagens_nomes = ",".join(nomes_novas_imagens) if nomes_novas_imagens else None
        
        if not session.get('is_admin'):
            anuncio_para_editar.status = 'pendente'
            flash_message = 'Anúncio atualizado e enviado para re-aprovação!'
        else:
            anuncio_para_editar.status = 'aprovado' 
            flash_message = f'Anúncio "{anuncio_para_editar.titulo}" atualizado e aprovado!'
        
        db.session.commit()
        flash(flash_message, 'success')
        
        if session.get('is_admin'):
            return redirect(url_for('admin_aprovar_anuncios_page'))
        return redirect(url_for('minha_conta_page'))
        
    return render_template('editar_anuncio.html', anuncio=anuncio_para_editar,
                           categorias_form=CATEGORIAS_FORM, condicoes_form=CONDICOES_FORM)

@app.route('/anuncio/<int:anuncio_id>/deletar', methods=['POST'])
@login_required
def deletar_anuncio_action(anuncio_id):
    anuncio = Anuncio.query.get_or_404(anuncio_id)
    if not (anuncio.user_id == session['user_id'] or session.get('is_admin')):
        flash('Você não tem permissão para deletar este anúncio.', 'danger')
        return redirect(request.referrer or url_for('home'))

    Oferta.query.filter_by(anuncio_id=anuncio.id).delete()
    
    if anuncio.imagens_nomes:
        for img_nome in anuncio.imagens_nomes.split(','):
            if img_nome:
                try:
                    caminho_imagem = os.path.join(app.config['UPLOAD_FOLDER'], img_nome.strip())
                    if os.path.exists(caminho_imagem):
                        os.remove(caminho_imagem)
                except Exception as e:
                    print(f"Erro ao deletar imagem {img_nome} do anúncio {anuncio_id}: {e}")
            
    db.session.delete(anuncio)
    db.session.commit()
    flash('Anúncio deletado com sucesso!', 'success')
    
    if request.referrer and '/admin/' in request.referrer:
        return redirect(url_for('admin_aprovar_anuncios_page')) 
    return redirect(url_for('minha_conta_page'))

@app.route('/search-results')
def search_results_page():
    query = request.args.get('query_popup', '').strip()
    resultados = []
    if query: 
        resultados = Anuncio.query.filter(
            Anuncio.status == 'aprovado', 
            ((Anuncio.titulo.ilike(f'%{query}%')) | (Anuncio.descricao.ilike(f'%{query}%')))
        ).order_by(Anuncio.id.desc()).all() 
    return render_template('search_results.html', query=query, resultados=resultados)

# --- Rotas de Contas de Usuário ---
@app.route('/login', methods=['GET', 'POST'])
def login_page():
    if request.method == 'POST':
        email = request.form.get('email')
        senha_digitada = request.form.get('senha')
        user = User.query.filter_by(email=email).first()
        if user and not user.is_banned and check_password_hash(user.senha_hash, senha_digitada):
            session['user_id'] = user.id; session['user_nome'] = user.nome; session['is_admin'] = user.is_admin 
            session.permanent = True; flash(f'Login bem-sucedido! Olá, {user.nome}!', 'success')
            return redirect(url_for('admin_dashboard') if user.is_admin else url_for('minha_conta_page'))
        elif user and user.is_banned: flash('Esta conta foi banida.', 'danger')
        else: flash('Email ou senha inválidos.', 'danger')
        # Mantém a lógica de renderizar a página de login em caso de erro, mas sem o objeto 'form'
        return render_template('login.html') 
    return render_template('login.html')

@app.route('/criar-conta', methods=['GET', 'POST'])
def criar_conta_page():
    if request.method == 'POST':
        nome=request.form.get('nome'); cpf=request.form.get('cpf'); email=request.form.get('email_criar'); endereco=request.form.get('endereco')
        senha=request.form.get('senha_criar'); confirmar_senha=request.form.get('confirmar_senha')
        erros = False
        if not all([nome,cpf,email,endereco,senha,confirmar_senha]): flash('Todos os campos são obrigatórios!','danger'); erros=True
        if senha != confirmar_senha: flash('As senhas não coincidem!','danger'); erros=True
        if User.query.filter_by(email=email).first(): flash('Email já cadastrado.','danger'); erros=True
        if User.query.filter_by(cpf=cpf).first(): flash('CPF já cadastrado.','danger'); erros=True
        if erros: return render_template('criar_conta.html')
        senha_hashed = generate_password_hash(senha, method='pbkdf2:sha256')
        is_first_user_admin = not bool(User.query.first())
        novo_usuario = User(nome=nome,cpf=cpf,email=email,endereco=endereco,senha_hash=senha_hashed,is_admin=is_first_user_admin,is_banned=False)
        db.session.add(novo_usuario); db.session.commit()
        flash(f'Conta para {nome} criada! Faça login.','success')
        if is_first_user_admin: flash('Como 1º usuário, você é Admin.','info')
        return redirect(url_for('login_page'))
    return render_template('criar_conta.html')

@app.route('/esqueceu-senha', methods=['GET', 'POST'])
def esqueceu_senha_page():
    if request.method == 'POST': flash('Funcionalidade de recuperação de senha ainda não implementada.', 'info'); return redirect(url_for('login_page'))
    return render_template('esqueceu_senha.html')

@app.route('/minha-conta')
@login_required
def minha_conta_page():
    user_atual = User.query.get(session['user_id'])
    user_anuncios = Anuncio.query.filter_by(user_id=session['user_id']).order_by(Anuncio.id.desc()).all()
    
    anuncio_ids_do_usuario = [anuncio.id for anuncio in user_anuncios]
    ofertas_recebidas = []
    if anuncio_ids_do_usuario:
        ofertas_recebidas = Oferta.query.filter(
            Oferta.anuncio_id.in_(anuncio_ids_do_usuario),
            Oferta.status == 'pendente' 
        ).order_by(Oferta.data_oferta.desc()).all()

    ofertas_feitas = Oferta.query.filter_by(
        comprador_id=session['user_id'],
        status='pendente' 
    ).order_by(Oferta.data_oferta.desc()).all()

    return render_template('minha_conta.html', 
                           anuncios_usuario=user_anuncios,
                           ofertas_recebidas=ofertas_recebidas, 
                           ofertas_feitas=ofertas_feitas,       
                           user=user_atual)

@app.route('/minha-conta/editar-perfil', methods=['POST'])
@login_required
def editar_perfil_action():
    user_para_editar = User.query.get_or_404(session['user_id'])
    user_para_editar.nome = request.form.get('perfil_nome', user_para_editar.nome).strip()
    user_para_editar.endereco = request.form.get('perfil_endereco', user_para_editar.endereco).strip()
    
    senha_atual = request.form.get('perfil_senha_atual')
    nova_senha = request.form.get('perfil_nova_senha')
    confirmar_nova_senha = request.form.get('perfil_confirmar_nova_senha')

    senha_validada_para_mudanca = True 
    if nova_senha: 
        senha_validada_para_mudanca = False 
        if not senha_atual:
            flash('Para alterar a senha, forneça sua senha atual.', 'danger')
        elif not check_password_hash(user_para_editar.senha_hash, senha_atual):
            flash('Senha atual incorreta.', 'danger')
        elif nova_senha != confirmar_nova_senha:
            flash('As novas senhas não coincidem.', 'danger')
        elif len(nova_senha) < 6: 
            flash('A nova senha deve ter pelo menos 6 caracteres.', 'danger')
        else:
            user_para_editar.senha_hash = generate_password_hash(nova_senha, method='pbkdf2:sha256')
            flash('Senha alterada com sucesso!', 'success')
            senha_validada_para_mudanca = True
    
    if senha_validada_para_mudanca: 
        db.session.commit()
        session['user_nome'] = user_para_editar.nome 
        if not nova_senha: 
             flash('Perfil atualizado com sucesso!', 'success')
    return redirect(url_for('minha_conta_page'))

@app.route('/logout')
def logout():
    session.clear(); flash('Você foi desconectado.', 'info'); return redirect(url_for('home'))

# --- Rotas de Admin ---
@app.route('/admin')
@admin_required 
def admin_dashboard():
    num_total_usuarios = User.query.count(); num_anuncios_pendentes = Anuncio.query.filter_by(status='pendente').count()
    num_anuncios_aprovados = Anuncio.query.filter_by(status='aprovado').count(); num_anuncios_rejeitados = Anuncio.query.filter_by(status='rejeitado').count()
    
    return render_template('admin_dashboard.html', 
                           num_total_usuarios=num_total_usuarios, 
                           num_anuncios_pendentes=num_anuncios_pendentes, 
                           num_anuncios_aprovados=num_anuncios_aprovados, 
                           num_anuncios_rejeitados=num_anuncios_rejeitados)

@app.route('/admin/aprovar-anuncios')
@admin_required
def admin_aprovar_anuncios_page():
    anuncios_pendentes = Anuncio.query.filter_by(status='pendente').order_by(Anuncio.id.asc()).all()
    return render_template('admin_aprovar_anuncios.html', anuncios=anuncios_pendentes)

@app.route('/admin/anuncio/<int:ad_id>/aprovar', methods=['POST'])
@admin_required
def admin_aprovar_anuncio(ad_id):
    anuncio = Anuncio.query.get_or_404(ad_id); anuncio.status = 'aprovado'; db.session.commit()
    flash(f'Anúncio "{anuncio.titulo}" (ID: {anuncio.id}) por {anuncio.autor.nome if anuncio.autor else "Usuário Desconhecido"} aprovado!', 'success')
    return redirect(url_for('admin_aprovar_anuncios_page'))

@app.route('/admin/anuncio/<int:ad_id>/rejeitar', methods=['POST'])
@admin_required
def admin_rejeitar_anuncio(ad_id):
    anuncio = Anuncio.query.get_or_404(ad_id); anuncio.status = 'rejeitado'; db.session.commit()
    flash(f'Anúncio "{anuncio.titulo}" (ID: {anuncio.id}) por {anuncio.autor.nome if anuncio.autor else "Usuário Desconhecido"} rejeitado.', 'info')
    return redirect(url_for('admin_aprovar_anuncios_page'))

@app.route('/admin/gerenciar-usuarios')
@admin_required
def admin_gerenciar_usuarios_page(): 
    todos_usuarios = User.query.order_by(User.id.asc()).all()
    num_admins = User.query.filter_by(is_admin=True).count() 
    return render_template('admin_gerenciar_usuarios.html', 
                           usuarios=todos_usuarios,
                           num_admins=num_admins) 

@app.route('/admin/usuario/<int:user_id>/toggle-admin', methods=['POST'])
@admin_required
def admin_toggle_admin_status(user_id):
    user = User.query.get_or_404(user_id)
    if user.id == session.get('user_id') and user.is_admin and User.query.filter_by(is_admin=True).count() <= 1:
        flash('Não pode remover status do único admin.', 'danger'); return redirect(url_for('admin_gerenciar_usuarios_page'))
    user.is_admin = not user.is_admin; db.session.commit()
    flash(f'Usuário {user.nome} foi {"promovido a" if user.is_admin else "rebaixado de"} administrador.', 'success')
    return redirect(url_for('admin_gerenciar_usuarios_page'))

@app.route('/admin/usuario/<int:user_id>/toggle-ban', methods=['POST'])
@admin_required
def admin_toggle_ban_status(user_id):
    user = User.query.get_or_404(user_id)
    if user.id == session.get('user_id'): flash('Não pode banir a si mesmo.', 'danger'); return redirect(url_for('admin_gerenciar_usuarios_page'))
    user.is_banned = not user.is_banned; db.session.commit()
    flash(f'Usuário {user.nome} foi {"banido" if user.is_banned else "desbanido"}.', 'success')
    return redirect(url_for('admin_gerenciar_usuarios_page'))

@app.route('/admin/usuario/<int:user_id>/delete', methods=['POST'])
@admin_required
def admin_delete_user(user_id):
    user_to_delete = User.query.get_or_404(user_id)
    if user_to_delete.id == session.get('user_id'): flash('Não pode deletar a si mesmo.', 'danger'); return redirect(url_for('admin_gerenciar_usuarios_page'))
    
    anuncios_do_usuario = Anuncio.query.filter_by(user_id=user_id).all()
    anuncio_ids_do_usuario = [anuncio.id for anuncio in anuncios_do_usuario]
    if anuncio_ids_do_usuario:
        Oferta.query.filter(Oferta.anuncio_id.in_(anuncio_ids_do_usuario)).delete(synchronize_session=False)
    
    Oferta.query.filter_by(comprador_id=user_id).delete(synchronize_session=False)

    Anuncio.query.filter_by(user_id=user_id).delete(synchronize_session=False)
    db.session.delete(user_to_delete)
    db.session.commit()
    flash(f'Usuário {user_to_delete.nome} e seus dados (anúncios e ofertas) foram deletados.', 'success')
    return redirect(url_for('admin_gerenciar_usuarios_page'))

# --- Rotas de Páginas Informativas ---
@app.route('/quem-somos')
def quem_somos_page(): return render_template('quem_somos.html')
@app.route('/compre')
def compre_page(): return render_template('compre.html')
@app.route('/venda')
def venda_page(): return render_template('venda.html')
@app.route('/suporte')
def suporte_page(): return render_template('suporte.html')
@app.route('/termos')
def termos_page(): return render_template('termos.html')

if __name__ == '__main__':
    with app.app_context(): 
        db.create_all() 
    app.run(debug=True)